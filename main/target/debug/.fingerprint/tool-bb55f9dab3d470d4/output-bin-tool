{"$message_type":"diagnostic","message":"the trait bound `generic_edge::EdgeType: From<u16>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":16319,"byte_end":16350,"line_start":376,"line_end":376,"column_start":13,"column_end":44,"is_primary":true,"text":[{"text":"            bitfield_fields!{$t; $($rest)*}","highlight_start":13,"highlight_end":44}],"label":"the trait `From<u16>` is not implemented for `generic_edge::EdgeType`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":16319,"byte_end":16350,"line_start":376,"line_end":376,"column_start":13,"column_end":44,"is_primary":false,"text":[{"text":"            bitfield_fields!{$t; $($rest)*}","highlight_start":13,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":16030,"byte_end":16112,"line_start":369,"line_end":369,"column_start":9,"column_end":91,"is_primary":false,"text":[{"text":"        bitfield!{$(#[$attribute])* $vis struct $name($t); no default BitRange; $($rest)*}","highlight_start":9,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":16030,"byte_end":16112,"line_start":369,"line_end":369,"column_start":9,"column_end":91,"is_primary":false,"text":[{"text":"        bitfield!{$(#[$attribute])* $vis struct $name($t); no default BitRange; $($rest)*}","highlight_start":9,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":16506,"byte_end":16588,"line_start":381,"line_end":381,"column_start":9,"column_end":91,"is_primary":false,"text":[{"text":"        bitfield!{$(#[$attribute])* $vis struct $name($t); no default BitRange; $($rest)*}","highlight_start":9,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/generic_edge.rs","byte_start":325,"byte_end":601,"line_start":19,"line_end":30,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"bitfield! {","highlight_start":1,"highlight_end":12},{"text":"    #[derive(Copy, Clone, Pod, Zeroable)]","highlight_start":1,"highlight_end":42},{"text":"    #[repr(C)]","highlight_start":1,"highlight_end":15},{"text":"    pub struct TinyEdge(u16);","highlight_start":1,"highlight_end":30},{"text":"    impl BitAnd;","highlight_start":1,"highlight_end":17},{"text":"    impl BitOr;","highlight_start":1,"highlight_end":16},{"text":"    impl BitXor;","highlight_start":1,"highlight_end":17},{"text":"    impl new;","highlight_start":1,"highlight_end":14},{"text":"    u16;","highlight_start":1,"highlight_end":9},{"text":"    u16, from into EdgeType, edge_type, set_edge_type: 1, 0;","highlight_start":1,"highlight_end":61},{"text":"    u16, dest_node, set_dest_node: 15, 2;","highlight_start":1,"highlight_end":42},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bitfield!","def_site_span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":13467,"byte_end":13488,"line_start":323,"line_end":323,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! bitfield {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"bitfield!","def_site_span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":13467,"byte_end":13488,"line_start":323,"line_end":323,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! bitfield {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"bitfield!","def_site_span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":13467,"byte_end":13488,"line_start":323,"line_end":323,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! bitfield {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"bitfield!","def_site_span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":13467,"byte_end":13488,"line_start":323,"line_end":323,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! bitfield {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"bitfield_fields!","def_site_span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-macros-0.19.1/src/lib.rs","byte_start":11401,"byte_end":11458,"line_start":376,"line_end":376,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn bitfield_fields(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `u16` to implement `Into<generic_edge::EdgeType>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `generic_edge::EdgeType: From<u16>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/generic_edge.rs:19:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mbitfield! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[derive(Copy, Clone, Pod, Zeroable)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[repr(C)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct TinyEdge(u16);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    u16, dest_node, set_dest_node: 15, 2;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<u16>` is not implemented for `generic_edge::EdgeType`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `u16` to implement `Into<generic_edge::EdgeType>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bitfield_fields` which comes from the expansion of the macro `bitfield` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `u16: From<generic_edge::EdgeType>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":16319,"byte_end":16350,"line_start":376,"line_end":376,"column_start":13,"column_end":44,"is_primary":true,"text":[{"text":"            bitfield_fields!{$t; $($rest)*}","highlight_start":13,"highlight_end":44}],"label":"the trait `From<generic_edge::EdgeType>` is not implemented for `u16`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":16319,"byte_end":16350,"line_start":376,"line_end":376,"column_start":13,"column_end":44,"is_primary":false,"text":[{"text":"            bitfield_fields!{$t; $($rest)*}","highlight_start":13,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":16030,"byte_end":16112,"line_start":369,"line_end":369,"column_start":9,"column_end":91,"is_primary":false,"text":[{"text":"        bitfield!{$(#[$attribute])* $vis struct $name($t); no default BitRange; $($rest)*}","highlight_start":9,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":16030,"byte_end":16112,"line_start":369,"line_end":369,"column_start":9,"column_end":91,"is_primary":false,"text":[{"text":"        bitfield!{$(#[$attribute])* $vis struct $name($t); no default BitRange; $($rest)*}","highlight_start":9,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":16506,"byte_end":16588,"line_start":381,"line_end":381,"column_start":9,"column_end":91,"is_primary":false,"text":[{"text":"        bitfield!{$(#[$attribute])* $vis struct $name($t); no default BitRange; $($rest)*}","highlight_start":9,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/generic_edge.rs","byte_start":325,"byte_end":601,"line_start":19,"line_end":30,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"bitfield! {","highlight_start":1,"highlight_end":12},{"text":"    #[derive(Copy, Clone, Pod, Zeroable)]","highlight_start":1,"highlight_end":42},{"text":"    #[repr(C)]","highlight_start":1,"highlight_end":15},{"text":"    pub struct TinyEdge(u16);","highlight_start":1,"highlight_end":30},{"text":"    impl BitAnd;","highlight_start":1,"highlight_end":17},{"text":"    impl BitOr;","highlight_start":1,"highlight_end":16},{"text":"    impl BitXor;","highlight_start":1,"highlight_end":17},{"text":"    impl new;","highlight_start":1,"highlight_end":14},{"text":"    u16;","highlight_start":1,"highlight_end":9},{"text":"    u16, from into EdgeType, edge_type, set_edge_type: 1, 0;","highlight_start":1,"highlight_end":61},{"text":"    u16, dest_node, set_dest_node: 15, 2;","highlight_start":1,"highlight_end":42},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bitfield!","def_site_span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":13467,"byte_end":13488,"line_start":323,"line_end":323,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! bitfield {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"bitfield!","def_site_span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":13467,"byte_end":13488,"line_start":323,"line_end":323,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! bitfield {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"bitfield!","def_site_span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":13467,"byte_end":13488,"line_start":323,"line_end":323,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! bitfield {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"bitfield!","def_site_span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.19.1/src/lib.rs","byte_start":13467,"byte_end":13488,"line_start":323,"line_end":323,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! bitfield {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"bitfield_fields!","def_site_span":{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-macros-0.19.1/src/lib.rs","byte_start":11401,"byte_end":11458,"line_start":376,"line_end":376,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn bitfield_fields(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `u16` implements `From<Char>`\n  `u16` implements `From<U16<O>>`\n  `u16` implements `From<bool>`\n  `u16` implements `From<node::EdgeType>`\n  `u16` implements `From<u8>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `generic_edge::EdgeType` to implement `Into<u16>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u16: From<generic_edge::EdgeType>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/generic_edge.rs:19:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mbitfield! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[derive(Copy, Clone, Pod, Zeroable)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[repr(C)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct TinyEdge(u16);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    u16, dest_node, set_dest_node: 15, 2;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<generic_edge::EdgeType>` is not implemented for `u16`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             `u16` implements `From<Char>`\u001b[0m\n\u001b[0m             `u16` implements `From<U16<O>>`\u001b[0m\n\u001b[0m             `u16` implements `From<bool>`\u001b[0m\n\u001b[0m             `u16` implements `From<node::EdgeType>`\u001b[0m\n\u001b[0m             `u16` implements `From<u8>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `generic_edge::EdgeType` to implement `Into<u16>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bitfield_fields` which comes from the expansion of the macro `bitfield` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
