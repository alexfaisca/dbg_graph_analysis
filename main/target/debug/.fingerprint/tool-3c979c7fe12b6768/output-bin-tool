{"$message_type":"diagnostic","message":"`UnsafeCell<i128>` cannot be shared between threads safely","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/generic_memory_map.rs","byte_start":95597,"byte_end":101817,"line_start":2362,"line_end":2482,"column_start":38,"column_end":18,"is_primary":true,"text":[{"text":"                res.push(scope.spawn(move |_| -> Result<Vec<u64>, Error> {","highlight_start":38,"highlight_end":75},{"text":"                    while unsafe{ todo.get().read() } > 0 {","highlight_start":1,"highlight_end":60},{"text":"                        println!(\"remaining {}\", unsafe{ todo.get().read() });","highlight_start":1,"highlight_end":79},{"text":"                        // Scan","highlight_start":1,"highlight_end":32},{"text":"                        let mut buff = vec![0; buff_size];","highlight_start":1,"highlight_end":59},{"text":"                        let mut i = 0;","highlight_start":1,"highlight_end":39},{"text":"                        for e in begin..end {","highlight_start":1,"highlight_end":46},{"text":"                            if s.get(e).load(Ordering::Relaxed) == l {","highlight_start":1,"highlight_end":71},{"text":"                                buff[i] = e;","highlight_start":1,"highlight_end":45},{"text":"                                *in_curr.get_mut(e) = true;","highlight_start":1,"highlight_end":60},{"text":"                                i += 1;","highlight_start":1,"highlight_end":40},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            if i == buff_size {","highlight_start":1,"highlight_end":48},{"text":"                                curr.push_slice(buff.as_slice());","highlight_start":1,"highlight_end":66},{"text":"                                i = 0;","highlight_start":1,"highlight_end":39},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if i > 0 {","highlight_start":1,"highlight_end":35},{"text":"                                curr.push_slice(&buff[0..i]);","highlight_start":1,"highlight_end":62},{"text":"                                i = 0;","highlight_start":1,"highlight_end":39},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        println!(\"tid {} finished scan edge_coun: {} - todo: {} / l: {}\", tid, self.width(), unsafe{ todo.get().read() }, l);","highlight_start":1,"highlight_end":142},{"text":"                        synchronize.wait();","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        while !curr.is_empty() {","highlight_start":1,"highlight_end":49},{"text":"                            println!(\"curr len: {}\", curr.len());","highlight_start":1,"highlight_end":66},{"text":"                            // ProcessSubLevel","highlight_start":1,"highlight_end":47},{"text":"                            let thread_load = curr.len().div_ceil(threads);","highlight_start":1,"highlight_end":76},{"text":"                            let begin = tid * thread_load;","highlight_start":1,"highlight_end":59},{"text":"                            // last vertex isn't iterated hence index_ptr.len() - 2","highlight_start":1,"highlight_end":84},{"text":"                            let end = std::cmp::min(begin + thread_load, curr.len());","highlight_start":1,"highlight_end":86},{"text":"                            let to_process = match curr.slice(0, curr.len()) {","highlight_start":1,"highlight_end":79},{"text":"                                Some(i) => i,","highlight_start":1,"highlight_end":46},{"text":"                                None => panic!(\"error reading curr in pkt\")","highlight_start":1,"highlight_end":76},{"text":"                            };","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            for e_idx in begin..end {","highlight_start":1,"highlight_end":54},{"text":"                                let u_v = *to_process.get(e_idx);","highlight_start":1,"highlight_end":66},{"text":"                                let u = *origin.get(u_v);","highlight_start":1,"highlight_end":58},{"text":"                                let v = graph_ptr.get(u_v).dest();","highlight_start":1,"highlight_end":67},{"text":"                                let edges_start = *index_ptr.get(u);","highlight_start":1,"highlight_end":69},{"text":"                                let edges_stop = *index_ptr.get(u + 1);","highlight_start":1,"highlight_end":72},{"text":"                                for j in edges_start..edges_stop {","highlight_start":1,"highlight_end":67},{"text":"                                    *x.get_mut(graph_ptr.get(j).dest()) = j + 1;","highlight_start":1,"highlight_end":81},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                for v_w in *index_ptr.get(v)..*index_ptr.get(v + 1) {","highlight_start":1,"highlight_end":86},{"text":"                                    let w = graph_ptr.get(v_w).dest();","highlight_start":1,"highlight_end":71},{"text":"                                    if *x.get(w) == 0 {","highlight_start":1,"highlight_end":56},{"text":"                                        continue;","highlight_start":1,"highlight_end":50},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    let w_u = *x.get(w);","highlight_start":1,"highlight_end":57},{"text":"                                    if *processed.get(v_w) || *processed.get(w_u) {","highlight_start":1,"highlight_end":84},{"text":"                                        continue;","highlight_start":1,"highlight_end":50},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    if s.get(v_w).load(Ordering::Relaxed) > l && ((u_v < w_u && *in_curr.get(w_u)) || !*in_curr.get(w_u)) {","highlight_start":1,"highlight_end":140},{"text":"                                        let prev_l_v_w = s.get(v_w).fetch_sub(1, Ordering::SeqCst);","highlight_start":1,"highlight_end":100},{"text":"                                        if prev_l_v_w == l + 1 {","highlight_start":1,"highlight_end":65},{"text":"                                            *in_next.get_mut(v_w) = true;","highlight_start":1,"highlight_end":74},{"text":"                                            buff[i] = v_w;","highlight_start":1,"highlight_end":59},{"text":"                                            i += 1;","highlight_start":1,"highlight_end":52},{"text":"                                            if i == buff_size {","highlight_start":1,"highlight_end":64},{"text":"                                                next.push_slice(buff.as_slice());","highlight_start":1,"highlight_end":82},{"text":"                                                i = 0;","highlight_start":1,"highlight_end":55},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        if prev_l_v_w <= l {","highlight_start":1,"highlight_end":61},{"text":"                                            s.get(v_w).fetch_add(1, Ordering::SeqCst);","highlight_start":1,"highlight_end":87},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                for j in edges_start..edges_stop {","highlight_start":1,"highlight_end":67},{"text":"                                    *x.get_mut(graph_ptr.get(j).dest()) = 0;","highlight_start":1,"highlight_end":77},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            if i > 0 {","highlight_start":1,"highlight_end":39},{"text":"                                next.push_slice(buff.as_slice());","highlight_start":1,"highlight_end":66},{"text":"                                i = 0;","highlight_start":1,"highlight_end":39},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            for e_idx in begin..end {","highlight_start":1,"highlight_end":54},{"text":"                                let edge = *to_process.get(e_idx);","highlight_start":1,"highlight_end":67},{"text":"                                *processed.get_mut(edge) = true;","highlight_start":1,"highlight_end":65},{"text":"                                *in_curr.get_mut(edge) = false;","highlight_start":1,"highlight_end":64},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            synchronize.wait();","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            if tid == 0 {","highlight_start":1,"highlight_end":42},{"text":"                                // prepare for next iteration","highlight_start":1,"highlight_end":62},{"text":"                                let aux_slice = curr_slice;","highlight_start":1,"highlight_end":60},{"text":"                                let in_aux = in_curr;","highlight_start":1,"highlight_end":54},{"text":"                                curr_slice = next_slice;","highlight_start":1,"highlight_end":57},{"text":"                                next_slice = aux_slice;","highlight_start":1,"highlight_end":56},{"text":"                                curr = next;","highlight_start":1,"highlight_end":45},{"text":"                                next = SharedQueueMut::from_shared_slice(next_slice);","highlight_start":1,"highlight_end":86},{"text":"                                in_curr = in_next;","highlight_start":1,"highlight_end":51},{"text":"                                in_next = in_aux;","highlight_start":1,"highlight_end":50},{"text":"                                unsafe{ *todo.get_mut() -= curr.len() as i128 };","highlight_start":1,"highlight_end":81},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            synchronize.wait();","highlight_start":1,"highlight_end":48},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        curr = SharedQueueMut::from_shared_slice(curr_slice);","highlight_start":1,"highlight_end":78},{"text":"                        l += 1;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    // FIXME: Finish by storing k-truss values","highlight_start":1,"highlight_end":63},{"text":"                    let mut res: Vec<u64> = vec![0; 20];","highlight_start":1,"highlight_end":57},{"text":"                    let thread_load = edge_count.div_ceil(threads);","highlight_start":1,"highlight_end":68},{"text":"                    let begin = tid * thread_load;","highlight_start":1,"highlight_end":51},{"text":"                    // last vertex isn't iterated hence index_ptr.len() - 2","highlight_start":1,"highlight_end":76},{"text":"                    let end = std::cmp::min(begin + thread_load, curr.len());","highlight_start":1,"highlight_end":78},{"text":"                    for e in begin..end {","highlight_start":1,"highlight_end":42},{"text":"                        let t = s.get(e).fetch_add(2, Ordering::Relaxed);","highlight_start":1,"highlight_end":74},{"text":"                        res[t as usize + 2] += 1;","highlight_start":1,"highlight_end":50},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    Ok(res)","highlight_start":1,"highlight_end":28},{"text":"                }));","highlight_start":1,"highlight_end":18}],"label":"`UnsafeCell<i128>` cannot be shared between threads safely","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/generic_memory_map.rs","byte_start":95591,"byte_end":95596,"line_start":2362,"line_end":2362,"column_start":32,"column_end":37,"is_primary":false,"text":[{"text":"                res.push(scope.spawn(move |_| -> Result<Vec<u64>, Error> {","highlight_start":32,"highlight_end":37}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Sync` is not implemented for `UnsafeCell<i128>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Arc<UnsafeCell<i128>>` to implement `Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because it's used within this closure","code":null,"level":"note","spans":[{"file_name":"src/generic_memory_map.rs","byte_start":95597,"byte_end":95632,"line_start":2362,"line_end":2362,"column_start":38,"column_end":73,"is_primary":true,"text":[{"text":"                res.push(scope.spawn(move |_| -> Result<Vec<u64>, Error> {","highlight_start":38,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `crossbeam::thread::Scope::<'env>::spawn`","code":null,"level":"note","spans":[{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/src/thread.rs","byte_start":8250,"byte_end":8255,"line_start":265,"line_end":265,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"    pub fn spawn<'scope, F, T>(&'scope self, f: F) -> ScopedJoinHandle<'scope, T>","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/src/thread.rs","byte_start":8380,"byte_end":8384,"line_start":268,"line_end":268,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"        F: Send + 'env,","highlight_start":12,"highlight_end":16}],"label":"required by this bound in `Scope::<'env>::spawn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `UnsafeCell<i128>` cannot be shared between threads safely\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/generic_memory_map.rs:2362:38\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                res.push(scope.spawn(move |_| -> Result<Vec<u64>, Error> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m ________________________________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    while unsafe{ todo.get().read() } > 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        println!(\"remaining {}\", unsafe{ todo.get().read() });\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2481\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    Ok(res)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2482\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`UnsafeCell<i128>` cannot be shared between threads safely\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `Sync` is not implemented for `UnsafeCell<i128>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Arc<UnsafeCell<i128>>` to implement `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this closure\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/generic_memory_map.rs:2362:38\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                res.push(scope.spawn(move |_| -> Result<Vec<u64>, Error> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `crossbeam::thread::Scope::<'env>::spawn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/alexandre/.config/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/src/thread.rs:268:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m265\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn spawn<'scope, F, T>(&'scope self, f: F) -> ScopedJoinHandle<'scope, T>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m268\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        F: Send + 'env,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Scope::<'env>::spawn`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `rand::seq::IndexedRandom`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/shared_slice.rs","byte_start":46,"byte_end":70,"line_start":2,"line_end":2,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"use rand::seq::IndexedRandom;","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `rand::seq::IndexedRandom`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/shared_slice.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rand::seq::IndexedRandom;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"irrefutable `while let` pattern","code":{"code":"irrefutable_let_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/generic_memory_map.rs","byte_start":14425,"byte_end":14468,"line_start":459,"line_end":459,"column_start":15,"column_end":58,"is_primary":true,"text":[{"text":"        while let l = reader.read_until(b'\\n', &mut line) {","highlight_start":15,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this pattern will always match, so the loop will never exit","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider instead using a `loop { ... }` with a `let` inside it","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(irrefutable_let_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: irrefutable `while let` pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/generic_memory_map.rs:459:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m459\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        while let l = reader.read_until(b'\\n', &mut line) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this pattern will always match, so the loop will never exit\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider instead using a `loop { ... }` with a `let` inside it\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(irrefutable_let_patterns)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error; 2 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
