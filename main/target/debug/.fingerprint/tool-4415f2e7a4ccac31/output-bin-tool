Name: Ident {
    ident: "TinyEdgeBF",
    span: #0 bytes(14480..14490),
}
Dest access: TokenStream [
    Ident {
        ident: "self",
        span: #80 bytes(14331..14342),
    },
    Punct {
        ch: '.',
        spacing: Alone,
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "dest_node",
        span: #0 bytes(14425..14436),
    },
    Group {
        delimiter: Parenthesis,
        stream: TokenStream [],
        span: #80 bytes(14331..14342),
    },
]
Edge type access: TokenStream [
    Ident {
        ident: "self",
        span: #80 bytes(14331..14342),
    },
    Punct {
        ch: '.',
        spacing: Alone,
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "edge_type",
        span: #0 bytes(14366..14377),
    },
    Group {
        delimiter: Parenthesis,
        stream: TokenStream [],
        span: #80 bytes(14331..14342),
    },
]
Example impl: TokenStream [
    Ident {
        ident: "impl",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "std",
        span: #80 bytes(14331..14342),
    },
    Punct {
        ch: ':',
        spacing: Joint,
        span: #80 bytes(14331..14342),
    },
    Punct {
        ch: ':',
        spacing: Alone,
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "cmp",
        span: #80 bytes(14331..14342),
    },
    Punct {
        ch: ':',
        spacing: Joint,
        span: #80 bytes(14331..14342),
    },
    Punct {
        ch: ':',
        spacing: Alone,
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "PartialOrd",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "for",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "TinyEdgeBF",
        span: #0 bytes(14480..14490),
    },
    Group {
        delimiter: Brace,
        stream: TokenStream [
            Ident {
                ident: "fn",
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "partial_cmp",
                span: #80 bytes(14331..14342),
            },
            Group {
                delimiter: Parenthesis,
                stream: TokenStream [
                    Punct {
                        ch: '&',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "self",
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: ',',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "other",
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: ':',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '&',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "Self",
                        span: #80 bytes(14331..14342),
                    },
                ],
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: '-',
                spacing: Joint,
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: '>',
                spacing: Alone,
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "Option",
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: '<',
                spacing: Alone,
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "std",
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: ':',
                spacing: Joint,
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: ':',
                spacing: Alone,
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "cmp",
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: ':',
                spacing: Joint,
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: ':',
                spacing: Alone,
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "Ordering",
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: '>',
                spacing: Alone,
                span: #80 bytes(14331..14342),
            },
            Group {
                delimiter: Brace,
                stream: TokenStream [
                    Ident {
                        ident: "Some",
                        span: #80 bytes(14331..14342),
                    },
                    Group {
                        delimiter: Parenthesis,
                        stream: TokenStream [
                            Ident {
                                ident: "self",
                                span: #80 bytes(14331..14342),
                            },
                            Punct {
                                ch: '.',
                                spacing: Alone,
                                span: #80 bytes(14331..14342),
                            },
                            Ident {
                                ident: "dest",
                                span: #80 bytes(14331..14342),
                            },
                            Group {
                                delimiter: Parenthesis,
                                stream: TokenStream [],
                                span: #80 bytes(14331..14342),
                            },
                            Punct {
                                ch: '.',
                                spacing: Alone,
                                span: #80 bytes(14331..14342),
                            },
                            Ident {
                                ident: "cmp",
                                span: #80 bytes(14331..14342),
                            },
                            Group {
                                delimiter: Parenthesis,
                                stream: TokenStream [
                                    Punct {
                                        ch: '&',
                                        spacing: Alone,
                                        span: #80 bytes(14331..14342),
                                    },
                                    Ident {
                                        ident: "other",
                                        span: #80 bytes(14331..14342),
                                    },
                                    Punct {
                                        ch: '.',
                                        spacing: Alone,
                                        span: #80 bytes(14331..14342),
                                    },
                                    Ident {
                                        ident: "dest",
                                        span: #80 bytes(14331..14342),
                                    },
                                    Group {
                                        delimiter: Parenthesis,
                                        stream: TokenStream [],
                                        span: #80 bytes(14331..14342),
                                    },
                                ],
                                span: #80 bytes(14331..14342),
                            },
                        ],
                        span: #80 bytes(14331..14342),
                    },
                ],
                span: #80 bytes(14331..14342),
            },
        ],
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "impl",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "std",
        span: #80 bytes(14331..14342),
    },
    Punct {
        ch: ':',
        spacing: Joint,
        span: #80 bytes(14331..14342),
    },
    Punct {
        ch: ':',
        spacing: Alone,
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "cmp",
        span: #80 bytes(14331..14342),
    },
    Punct {
        ch: ':',
        spacing: Joint,
        span: #80 bytes(14331..14342),
    },
    Punct {
        ch: ':',
        spacing: Alone,
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "Ord",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "for",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "TinyEdgeBF",
        span: #0 bytes(14480..14490),
    },
    Group {
        delimiter: Brace,
        stream: TokenStream [
            Ident {
                ident: "fn",
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "cmp",
                span: #80 bytes(14331..14342),
            },
            Group {
                delimiter: Parenthesis,
                stream: TokenStream [
                    Punct {
                        ch: '&',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "self",
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: ',',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "other",
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: ':',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '&',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "Self",
                        span: #80 bytes(14331..14342),
                    },
                ],
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: '-',
                spacing: Joint,
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: '>',
                spacing: Alone,
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "std",
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: ':',
                spacing: Joint,
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: ':',
                spacing: Alone,
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "cmp",
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: ':',
                spacing: Joint,
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: ':',
                spacing: Alone,
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "Ordering",
                span: #80 bytes(14331..14342),
            },
            Group {
                delimiter: Brace,
                stream: TokenStream [
                    Ident {
                        ident: "self",
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '.',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "dest",
                        span: #80 bytes(14331..14342),
                    },
                    Group {
                        delimiter: Parenthesis,
                        stream: TokenStream [],
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '.',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "cmp",
                        span: #80 bytes(14331..14342),
                    },
                    Group {
                        delimiter: Parenthesis,
                        stream: TokenStream [
                            Punct {
                                ch: '&',
                                spacing: Alone,
                                span: #80 bytes(14331..14342),
                            },
                            Ident {
                                ident: "other",
                                span: #80 bytes(14331..14342),
                            },
                            Punct {
                                ch: '.',
                                spacing: Alone,
                                span: #80 bytes(14331..14342),
                            },
                            Ident {
                                ident: "dest",
                                span: #80 bytes(14331..14342),
                            },
                            Group {
                                delimiter: Parenthesis,
                                stream: TokenStream [],
                                span: #80 bytes(14331..14342),
                            },
                        ],
                        span: #80 bytes(14331..14342),
                    },
                ],
                span: #80 bytes(14331..14342),
            },
        ],
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "impl",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "PartialEq",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "for",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "TinyEdgeBF",
        span: #0 bytes(14480..14490),
    },
    Group {
        delimiter: Brace,
        stream: TokenStream [
            Ident {
                ident: "fn",
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "eq",
                span: #80 bytes(14331..14342),
            },
            Group {
                delimiter: Parenthesis,
                stream: TokenStream [
                    Punct {
                        ch: '&',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "self",
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: ',',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "other",
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: ':',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '&',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "Self",
                        span: #80 bytes(14331..14342),
                    },
                ],
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: '-',
                spacing: Joint,
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: '>',
                spacing: Alone,
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "bool",
                span: #80 bytes(14331..14342),
            },
            Group {
                delimiter: Brace,
                stream: TokenStream [
                    Ident {
                        ident: "self",
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '.',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "dest_node",
                        span: #80 bytes(14331..14342),
                    },
                    Group {
                        delimiter: Parenthesis,
                        stream: TokenStream [],
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '=',
                        spacing: Joint,
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '=',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "other",
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '.',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "dest_node",
                        span: #80 bytes(14331..14342),
                    },
                    Group {
                        delimiter: Parenthesis,
                        stream: TokenStream [],
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '&',
                        spacing: Joint,
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '&',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "self",
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '.',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "edge_type",
                        span: #80 bytes(14331..14342),
                    },
                    Group {
                        delimiter: Parenthesis,
                        stream: TokenStream [],
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '=',
                        spacing: Joint,
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '=',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "other",
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '.',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "edge_type",
                        span: #80 bytes(14331..14342),
                    },
                    Group {
                        delimiter: Parenthesis,
                        stream: TokenStream [],
                        span: #80 bytes(14331..14342),
                    },
                ],
                span: #80 bytes(14331..14342),
            },
        ],
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "impl",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "Eq",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "for",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "TinyEdgeBF",
        span: #0 bytes(14480..14490),
    },
    Group {
        delimiter: Brace,
        stream: TokenStream [],
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "impl",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "GenericEdge",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "for",
        span: #80 bytes(14331..14342),
    },
    Ident {
        ident: "TinyEdgeBF",
        span: #0 bytes(14480..14490),
    },
    Group {
        delimiter: Brace,
        stream: TokenStream [
            Punct {
                ch: '#',
                spacing: Alone,
                span: #80 bytes(14331..14342),
            },
            Group {
                delimiter: Bracket,
                stream: TokenStream [
                    Ident {
                        ident: "inline",
                        span: #80 bytes(14331..14342),
                    },
                ],
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "fn",
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "dest",
                span: #80 bytes(14331..14342),
            },
            Group {
                delimiter: Parenthesis,
                stream: TokenStream [
                    Punct {
                        ch: '&',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "self",
                        span: #80 bytes(14331..14342),
                    },
                ],
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: '-',
                spacing: Joint,
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: '>',
                spacing: Alone,
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "usize",
                span: #80 bytes(14331..14342),
            },
            Group {
                delimiter: Brace,
                stream: TokenStream [
                    Ident {
                        ident: "self",
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '.',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "dest_node",
                        span: #0 bytes(14425..14436),
                    },
                    Group {
                        delimiter: Parenthesis,
                        stream: TokenStream [],
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "as",
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "usize",
                        span: #80 bytes(14331..14342),
                    },
                ],
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: '#',
                spacing: Alone,
                span: #80 bytes(14331..14342),
            },
            Group {
                delimiter: Bracket,
                stream: TokenStream [
                    Ident {
                        ident: "inline",
                        span: #80 bytes(14331..14342),
                    },
                ],
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "fn",
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "e_type",
                span: #80 bytes(14331..14342),
            },
            Group {
                delimiter: Parenthesis,
                stream: TokenStream [
                    Punct {
                        ch: '&',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "self",
                        span: #80 bytes(14331..14342),
                    },
                ],
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: '-',
                spacing: Joint,
                span: #80 bytes(14331..14342),
            },
            Punct {
                ch: '>',
                spacing: Alone,
                span: #80 bytes(14331..14342),
            },
            Ident {
                ident: "EdgeType",
                span: #80 bytes(14331..14342),
            },
            Group {
                delimiter: Brace,
                stream: TokenStream [
                    Ident {
                        ident: "self",
                        span: #80 bytes(14331..14342),
                    },
                    Punct {
                        ch: '.',
                        spacing: Alone,
                        span: #80 bytes(14331..14342),
                    },
                    Ident {
                        ident: "edge_type",
                        span: #0 bytes(14366..14377),
                    },
                    Group {
                        delimiter: Parenthesis,
                        stream: TokenStream [],
                        span: #80 bytes(14331..14342),
                    },
                ],
                span: #80 bytes(14331..14342),
            },
        ],
        span: #80 bytes(14331..14342),
    },
]
{"$message_type":"diagnostic","message":"unused import: `bitfield::bitfield`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/generic_edge.rs","byte_start":31,"byte_end":49,"line_start":2,"line_end":2,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use bitfield::bitfield;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/generic_edge.rs","byte_start":27,"byte_end":51,"line_start":2,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use bitfield::bitfield;","highlight_start":1,"highlight_end":24},{"text":"use bytemuck::{Pod, Zeroable};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `bitfield::bitfield`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/generic_edge.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse bitfield::bitfield;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Pod` and `Zeroable`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/generic_edge.rs","byte_start":66,"byte_end":69,"line_start":3,"line_end":3,"column_start":16,"column_end":19,"is_primary":true,"text":[{"text":"use bytemuck::{Pod, Zeroable};","highlight_start":16,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/generic_edge.rs","byte_start":71,"byte_end":79,"line_start":3,"line_end":3,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"use bytemuck::{Pod, Zeroable};","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/generic_edge.rs","byte_start":51,"byte_end":82,"line_start":3,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use bytemuck::{Pod, Zeroable};","highlight_start":1,"highlight_end":31},{"text":"pub use graph_derive::GenericEdge;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Pod` and `Zeroable`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/generic_edge.rs:3:16\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse bytemuck::{Pod, Zeroable};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `e_type` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/generic_edge.rs","byte_start":221,"byte_end":232,"line_start":7,"line_end":7,"column_start":11,"column_end":22,"is_primary":false,"text":[{"text":"pub trait GenericEdge {","highlight_start":11,"highlight_end":22}],"label":"method in this trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/generic_edge.rs","byte_start":271,"byte_end":277,"line_start":9,"line_end":9,"column_start":8,"column_end":14,"is_primary":true,"text":[{"text":"    fn e_type(&self) -> EdgeType;","highlight_start":8,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `e_type` is never used\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/generic_edge.rs:9:8\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait GenericEdge {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn dest(&self) -> usize;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn e_type(&self) -> EdgeType;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"struct `TinyEdge` is never constructed","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/generic_edge.rs","byte_start":1966,"byte_end":1974,"line_start":77,"line_end":77,"column_start":12,"column_end":20,"is_primary":true,"text":[{"text":"pub struct TinyEdge {","highlight_start":12,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: struct `TinyEdge` is never constructed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/generic_edge.rs:77:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct TinyEdge {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 4 warnings emitted\u001b[0m\n\n"}
